package cn.ffcs.is.mss.analyzer.flink.alert

import java.beans.{IntrospectionException, PropertyDescriptor}
import java.lang.reflect.{Field, InvocationTargetException, Method}
import java.util.UUID

import javax.persistence.Column

/**
  * @Auther chenwei
  * @Description
  * @Date: Created in 2018/11/27 08:17
  * @Modified By
  */
trait GenerateAlertModel {
  def getAlertName(alertName: String): String = {
    if (alertName == null || alertName.length == 0) {
      "NULL"
    } else {
      alertName
    }
  }

  def getAlertTimestamp(alertTimestamp: Long): String = {
    alertTimestamp.toString
  }

  def getAlertType(alertType: String): String = {
    if (alertType == null || alertType.length == 0) {
      "NULL"
    } else {
      alertType
    }
  }

  def getAlertLevel(alertLevel: Int): Int = {
    alertLevel
  }

  def getAlertRegion(alertRegion: String): String = {
    if (alertRegion == null || alertRegion.length == 0) {
      "NULL"
    } else {
      alertRegion
    }
  }

  def getAlertBusiness(alertBusiness: String): String = {
    if (alertBusiness == null || alertBusiness.length == 0) {
      "NULL"
    } else {
      alertBusiness
    }
  }

  def getAlertDomain(alertDomain: String): String = {
    if (alertDomain == null || alertDomain.length == 0) {
      "NULL"
    } else {
      alertDomain
    }
  }

  def getAlertSrcIp(alertSrcIp: String): String = {
    if (alertSrcIp == null || alertSrcIp.length == 0) {
      "NULL"
    } else {
      alertSrcIp
    }
  }


  def getAlertSrcPort(alertSrcPort: String): String = {
    if (alertSrcPort == null || alertSrcPort.length == 0) {
      "NULL"
    } else {
      alertSrcPort
    }
  }

  def getAlertDestIp(alertDestIp: String): String = {
    if (alertDestIp == null || alertDestIp.length == 0) {
      "NULL"
    } else {
      alertDestIp
    }
  }

  def getAlertDestPort(alertDestPort: String): String = {
    if (alertDestPort == null || alertDestPort.length == 0) {
      "NULL"
    } else {
      alertDestPort
    }
  }

  def getAlertTimes(alertTimes: Int): Int = {
    alertTimes
  }

  def getAlertIp(alertIp: String): String = {
    if (alertIp == null || alertIp.length == 0) {
      "NULL"
    } else {
      alertIp
    }
  }

  def getAlertDevice(alertDevice: String): String = {
    if (alertDevice == null || alertDevice.length == 0) {
      "NULL"
    } else {
      alertDevice
    }
  }

  def getAlertDescription(o: Object): String = {
    try { //根据字段获取其get方法
      val clazz = o.getClass
      val fields = clazz.getDeclaredFields
      val stringBuilder = new StringBuilder
      for (field <- fields) { //使其可以访问私有字段
        field.setAccessible(true)
        val propertyDescriptor = new PropertyDescriptor(field.getName, clazz)
        if (propertyDescriptor.getReadMethod != null) {
          val method = propertyDescriptor.getReadMethod
          //获取其对应数据库的字段名
          val column = method.getAnnotation(classOf[Column])
          val value = method.invoke(o).toString
          stringBuilder.append(column.name + "=" + value + ";")
        }
      }
      if (stringBuilder.length > 1) stringBuilder.deleteCharAt(stringBuilder.length - 1) {
        return stringBuilder.toString
      }
    } catch {
      case e: InvocationTargetException =>
        e.printStackTrace()
      case e: IllegalAccessException =>
        e.printStackTrace()
      case e: IntrospectionException =>
        e.printStackTrace()
    }
    ""
  }

  def getAlertId(alertId: String): String = {
    if (alertId == null || alertId.length == 0) {
      (math.random * 10000).toInt.toString
    } else {
      alertId
    }
  }

  def getAlertRuleId(alertRuleId: String): String = {
    if (alertRuleId == null || alertRuleId.length == 0) {
      "NULL"
    } else {
      alertRuleId
    }
  }

  def getAlertStatus(alertStatus: Int): Int = {
    alertStatus
  }

  def getAlertUsername(alertUsername: String): String = {
    if (alertUsername == null || alertUsername.length == 0) {
      "NULL"
    } else {
      alertUsername
    }
  }

  def getEventTimeStamp(timeStamp: Long): Long = {
    timeStamp
  }

  def getAlertAssembly(alertAssembly: Int): Int = {
    alertAssembly
  }
}
